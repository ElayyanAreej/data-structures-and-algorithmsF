/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package cc05;

public class App {

    public static void main(String[] args) {

       LinkedList<Integer> linkedList= new LinkedList<Integer>();
       linkedList.insert(1);
        linkedList.insert(2);
        linkedList.insert(3);
        System.out.println("");
        System.out.println("linked list after insert 3 values:  "+linkedList.toString());
        System.out.println("--------------------------------------------");
        System.out.println("");
        System.out.println("linked list check includes 2 :  "+linkedList.includes(2));
        System.out.println("linked list check includes 4 :  "+linkedList.includes(4));
        System.out.println("--------------------------------------------");
        System.out.println("");
        linkedList.append(0);
        System.out.println("linked list after append 0 value to the last:  "+linkedList.toString());
        System.out.println("--------------------------------------------");
        System.out.println("");
        linkedList.insertBefore(1,4);
        System.out.println("linked list after insert Before 1 the value 4 :  "+linkedList.toString());
        System.out.println("--------------------------------------------");
        System.out.println("");
        linkedList.insertAfter(1,4);
        System.out.println("linked list after insert After 1 the value 4 :  "+linkedList.toString());
        System.out.println("--------------------------------------------");
        System.out.println("");
        System.out.println("0 kth: "+linkedList.kth(0));
        System.out.println("2 kth: "+linkedList.kth(2));
        System.out.println("6 kth: "+linkedList.kth(6));
     System.out.println("--------------------------------------------");
     System.out.println("linked list before reverse:  "+linkedList.toString());

     linkedList.reverse();
     System.out.println("linked list after reverse:  "+linkedList.toString());


     System.out.println("---------------------CC08-----------------------");

     LinkedList<Integer> linkedList1= new LinkedList<Integer>();
     linkedList1.insert(1);
     linkedList1.insert(2);
     linkedList1.insert(3);
     LinkedList<Integer> linkedList2= new LinkedList<Integer>();
     linkedList2.insert(0);
     linkedList2.insert(0);
     linkedList2.insert(0);
     System.out.println("list1   "+linkedList1.toString());
     System.out.println("list2   "+linkedList2.toString());

     App.zipLists(linkedList1,linkedList2);


     System.out.println("---------------------CC10-----------------------");
 Stack s=new Stack();
 s.push(5);
 s.push(4);
     s.push(3);
     System.out.println(s.toString());
     System.out.println(s.peek());
     s.pop();
     System.out.println(s.toString());
     System.out.println("---------------------Queue CC10-----------------------");

     Queue q=new Queue();
     q.enqueue(6);
     q.enqueue(4);
     q.enqueue(3);
     System.out.println("queue after insert 3 values: "+q.toString());
        System.out.println("dequeue  "+q.dequeue());
     System.out.println("queue after dequeue: "+q.toString());
        System.out.println("dequeue  "+q.dequeue());
        System.out.println("queue after dequeue: "+q.toString());
        System.out.println("dequeue  "+q.dequeue());
        System.out.println("queue after dequeue: "+q.toString());
        q.enqueue(1);
        q.enqueue(2);
        System.out.println("dequeue  "+q.dequeue());
        System.out.println("queue after dequeue: "+q.toString());
        System.out.println("is queue Empty ?? : "+q.isEmpty());



    }

 public static LinkedList zipLists(LinkedList list1, LinkedList list2) {
  LinkedList zipped=new LinkedList();
  Node current1=list1.head;
  Node current2=list2.head;
while (current1.next!=null || current2.next!=null) {
 if (current1.next != null) {
  zipped.insert(current1.value);
  current1 = current1.next;
 }
 if (current2.next != null) {
  zipped.insert(current2.value);
  current2 = current2.next;
 }
}
  zipped.insert(current1.value);
  zipped.insert(current2.value);

System.out.println("zipped List :"+zipped.toString());
  return  zipped;
 }
}
